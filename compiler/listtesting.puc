def <a> filter(list: [a], f: a -> Bool): [a] =>
    case list {
        of [] => []
        of [h, t] =>
            if f(h) then
                h::filter(t)(f)
            else
                filter(t)(f)
    }

def <a, b> map(list: [a], f: a -> b) : [b] =>
    case list {
        of [] => []
        of [h, t] =>
            f(h)::map(t)(f)
    }

def <a> size(list: [a]): Integer =>
    case list {
        of [] => 0
        of [h, t] => 1 + size(t)
    }

def <a, b> fold(list : [b], initial : a, f: a -> b -> a) : a =>
    case list {
        of [] => initial
        of [h, t] =>
            let y = f(initial)(h) in
            fold(t)(y)(f)
        }

let concat_a = fn x => x ++ "a" in
let make_one = fn x => 1 in
let create_text = fn x => fn y => x ++ y in
let ls = ["a", "b", "c", "a"] in
map(ls)(make_one)