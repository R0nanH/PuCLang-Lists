def filter(f: a -> Bool, list: [a]): [a] =>
    case list {
        of [] => []
        of [h, t] =>
            if f(h) then
                h::filter(f)(t)
            else
                filter(f)(t)
    }

def map(f: a -> a, list: [a]) : [a] =>
    case list {
        of [] => []
        of [h, t] =>
            f(h)::map(f)(t)
    }


def size(list: [a]): Integer =>
    case list {
        of [] => 0
        of [h, t] => 1 + size(t)
    }


let concat_a = fn x => x ++ "a" in
let alphls = ["a", "b", "c", "a"] in
map(concat_a)(alphls)

